<launch>

    <!-- Run the Python script that calls chemist_eye_warning.bash (one) -->
    <node name="speech_service_one_launcher" pkg="chemist_eye" type="dummy_speech_service.py" output="screen"/>
    
    <!-- Run the Python script that calls chemist_eye_warning.bash (two) -->
    <node name="speech_service_two_launcher" pkg="chemist_eye" type="dummy_speech_service_two.py" output="screen"/>

    <!-- Run the Python script that calls chemist_eye_warning.bash (three) -->
    <node name="speech_service_three_launcher" pkg="chemist_eye" type="dummy_speech_service_three.py" output="screen"/>

    <!-- Define a parameter for the bag file name -->
    <arg name="bag_ir_cameras" default="$(env HOME)/rosbags/ir_cameras_default_recording.bag"/>

    <!-- Play the specified bag file for IR cameras -->
    <node pkg="rosbag" type="play" name="rosbag_play" args="$(arg bag_ir_cameras) --clock"/>

    <!-- Set YOLO_VERBOSE to False -->
    <env name="YOLO_VERBOSE" value="False" />

    <!-- Launch the tf calibrator for IR ChemistEye 1 node -->
    <node name="ircameraone_tf_broadcaster" pkg="chemist_eye" type="camera_ir_one_calibrator_tf.py" output="screen"/>

    <!-- Launch the tf calibrator for IR ChemistEye 2 node -->
    <node name="ircameratwo_tf_broadcaster" pkg="chemist_eye" type="camera_ir_two_calibrator_tf.py" output="screen"/>

    <!-- Launch fire detection node -->
    <node name="fire_detection_node" pkg="chemist_eye" type="fire_detection.py" output="screen"/>
   
    <!-- Launch the tf calibrator for ChemistEye 1 node -->
    <node name="cameraone_tf_broadcaster" pkg="chemist_eye" type="cameraone_calibrator_tf.py" output="screen"/>

    <!-- Launch the tf calibrator for ChemistEye 2 node -->
    <node name="cameratwo_tf_broadcaster" pkg="chemist_eye" type="cameratwo_calibrator_tf.py" output="screen"/>

    <!-- Launch the tf calibrator for ChemistEye 3 node -->
    <node name="camerathree_tf_broadcaster" pkg="chemist_eye" type="camerathree_calibrator_tf.py" output="screen"/>
    
    <!-- Launch the detector node (camera one) -->
    <node name="detector_one_node" pkg="chemist_eye" type="dummy_chemist_eye_detector.py" output="screen"/>
    
    <!-- Launch the detector node (camera two) -->
    <node name="detector_two_node" pkg="chemist_eye" type="chemist_eye_detector_two.py" output="screen"/>

    <!-- Launch the detector node (camera three) -->
    <node name="detector_three_node" pkg="chemist_eye" type="chemist_eye_detector_three.py" output="screen"/>
    
    <!-- Launch rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find chemist_eye)/config/experiment_3.rviz" output="screen">
        <param name="args" value="2>/dev/null"/>
    </node>

    <!-- Publish static transform from map to world -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_world_transform" args="0 0 0 -1.5708 0 0 map world" />

    <!-- Load the map using the map_server -->
    <node pkg="map_server" type="map_server" name="map_server" args="$(find chemist_eye)/maps/ACL_map.yaml"/>

    <!-- Launch llm node -->
    <node name="llm_classificator_node" pkg="chemist_eye" type="llm.py" output="screen"/>

    <!-- Optional: Add a short delay to allow the services to fully initialise -->
    <param name="service_call_delay" value="10" />

    <!-- Launch Image Joiner -->
    <node name="imgs_joiner_node" pkg="chemist_eye" type="images_joiner.py" output="screen"/>
    <!-- Robot 1 -->
    
    <!-- Define parameters for initial position and orientation under robot1 namespace -->
    <arg name="robot1_namespace" default="robot1"/>

    <!-- Launch robot1 within its namespace -->
    <group ns="robot1">
        <!-- Robot URDF description with robot_namespace as an argument -->
        <param name="robot_description" command="$(find xacro)/xacro $(find chemist_eye)/urdf/kuka_mobile_base_with_arm.urdf robot_namespace:=$(arg robot1_namespace)"/>

        <node name="mobile_robot_state_publisher" pkg="chemist_eye" type="kuka_tf_skeleton.py" output="screen">
            <param name="ns_name" value="robot1"/>
        </node>

        <!-- Launch the mobile base broadcaster with customized parameters -->
        <node name="mobile_base_tf_broadcaster" pkg="chemist_eye" type="kuka_mobile_robot_state_publisher.py" output="screen">
            <param name="start_node" value="24"/>
            <param name="goal_node" value="1"/>
            <param name="automatic" value="True"/>
            <param name="ns_name" value="robot1"/>
        </node>
    </group>

    <!-- Repeat similar setup for robot2 -->
    <arg name="robot2_namespace" default="robot2"/>
    <group ns="robot2">
        <param name="robot_description" command="$(find xacro)/xacro $(find chemist_eye)/urdf/kuka_mobile_base_with_arm.urdf robot_namespace:=$(arg robot2_namespace)"/>

        <node name="mobile_robot_state_publisher" pkg="chemist_eye" type="kuka_tf_skeleton.py" output="screen">
            <param name="ns_name" value="robot2"/>
        </node>

        <node name="mobile_base_tf_broadcaster" pkg="chemist_eye" type="kuka_mobile_robot_state_publisher.py" output="screen">
            <param name="start_node" value="36"/>
            <param name="goal_node" value="32"/>
            <param name="automatic" value="True"/>
            <param name="ns_name" value="robot2"/>
        </node>
    </group>


    <!-- Repeat similar setup for robot3 -->
    <arg name="robot3_namespace" default="robot3"/>
    <group ns="robot3">
        <param name="robot_description" command="$(find xacro)/xacro $(find chemist_eye)/urdf/kuka_mobile_base_with_arm.urdf robot_namespace:=$(arg robot3_namespace)"/>

        <node name="mobile_robot_state_publisher" pkg="chemist_eye" type="kuka_tf_skeleton.py" output="screen">
            <param name="ns_name" value="robot3"/>
        </node>

        <node name="mobile_base_tf_broadcaster" pkg="chemist_eye" type="kuka_mobile_robot_state_publisher.py" output="screen">
            <param name="start_node" value="4"/>
            <param name="goal_node" value="3"/>
            <param name="automatic" value="True"/>
            <param name="ns_name" value="robot3"/>
        </node>
    </group>
    <!-- Navigation grhap visualizer-->
    <node name="navigation_graph_node" pkg="chemist_eye" type="navigation_graph.py" output="screen"/>

    <!-- Launch the detector node (camera one) -->
    <node name="dummy_llm_node" pkg="chemist_eye" type="dummy_llm.py" output="screen"/>
    
</launch>
